import { ReplaceInFileConfig, sync } from "replace-in-file";
import { ArtifactClient } from "@actions/artifact";
import { glob } from "glob";
import * as core from "@actions/core";

/**
 * Manages the artifacts generated by the taskcat GitHub Action.
 */
class TaskcatArtifactManager {
  /**
   * Mask the AWS account ID from the log files generated in the taskcat_outputs
   * directory, and publish them as a GitHub artifact.
   */
  public maskAndPublishTaskcatArtifacts(): void {
    core.info("Entered the maskAndPublishTaskcatArtifacts function");
  }

  /**
   * Masks the AWS account ID from the taskcat_output logs.
   *
   * @throws {@link Error} Thrown if the AWS account ID is an empty string.
   *
   * @param awsAccountId - the AWS account ID to mask in the logs.
   * @param filePath - the file path to the `taskcat_outputs` directory.
   */
  public maskAccountId(awsAccountId: string, filePath: string): void {
    if (awsAccountId === "") {
      throw new Error();
    }

    const replaceOptions: ReplaceInFileConfig = {
      files: filePath,
      from: awsAccountId,
      to: "***",
    };

    sync(replaceOptions);
  }

  /**
   * Publish the taskcat output logs as a GitHub artifact
   *
   * @param filePath - the file path to the `taskcat_outputs` directory
   */
  public publishTaskcatOutputs(
    artifactClient: ArtifactClient,
    filePath: string
  ): void {
    const taskcatLogs: string[] = glob.sync(filePath);

    artifactClient.uploadArtifact("taskcat_outputs", taskcatLogs, filePath);
  }
}

export { TaskcatArtifactManager };

const taskcatArtifactManager = new TaskcatArtifactManager();
taskcatArtifactManager.maskAndPublishTaskcatArtifacts();
